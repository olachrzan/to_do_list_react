{"version":3,"sources":["Form/index.js","TasksList/index.js","TextButtons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","onChange","target","placeholder","autoFocus","type","TasksList","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","TextButtons","toggleHideDone","setAllDone","length","disabled","every","Section","title","extraHeaderContent","body","Header","Container","children","App","storedTasks","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","setHideDone","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b51e325.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n   const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n   const onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      const trimmedNewTaskContent = newTaskContent.trim();\r\n      if (trimmedNewTaskContent === \"\") {\r\n         return\r\n      }\r\n      addNewTask(trimmedNewTaskContent);\r\n      setNewTaskContent(\"\");\r\n   };\r\n\r\n   return (\r\n      <form className=\"form\" onSubmit={onFormSubmit}>\r\n         <input\r\n            value={newTaskContent}\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n            className=\"form__input\"\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            autoFocus\r\n         />\r\n         <input className=\"form__button\" type=\"submit\" value=\"Dodaj zadanie\" />\r\n      </form>\r\n   )\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst TasksList = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n   <ul className=\"list\">\r\n      {tasks.map(task => (\r\n         <li\r\n            key={task.id}\r\n            className={`list__item ${task.done && hideDone ? \"list__item--hidden\" : \"\"}`}>\r\n            <button\r\n               className=\"list__button\"\r\n               onClick={() => toggleTaskDone(task.id)}\r\n            >\r\n               {task.done ? \"âœ”\" : \"\"}\r\n            </button>\r\n            <span className={`list__span ${task.done ? \"list__span--done\" : \"\"}`}>\r\n               {task.content}\r\n            </span>\r\n            <button\r\n               className=\"list__button list__button--remove\"\r\n               onClick={() => removeTask(task.id)}\r\n            >ðŸ—‘</button>\r\n         </li>\r\n      ))}\r\n   </ul >\r\n);\r\n\r\nexport default TasksList;","import \"./style.css\";\r\n\r\nconst TextButtons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n\tif (tasks.length === 0)\r\n\t\treturn null;\r\n\r\n\treturn (\r\n\t\t<div className=\"textButtons\">\r\n\t\t\t<button onClick={toggleHideDone} className=\"textButtons__button\">\r\n\t\t\t\t{hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n\t\t\t</button>\r\n\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"textButtons__button\"\r\n\t\t\t\tonClick={setAllDone}\r\n\t\t\t\tdisabled={tasks.every(({ done }) => done)}\r\n\t\t\t>\r\n\t\t\t\tUkoÅ„cz wszystkie\r\n\t\t\t</button>\r\n\t\t</div >\r\n\t)\r\n};\r\n\r\nexport default TextButtons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n   <section className=\"section\">\r\n      <header className=\"section__header\">\r\n         <h2 className=\"section__title\">{title}</h2>\r\n         {extraHeaderContent}\r\n      </header>\r\n      <div className=\"section__body\">\r\n         {body}\r\n      </div>\r\n   </section>\r\n);\r\n\r\nexport default Section;","const Header = () => (\r\n   <header className=\"headerSection\">\r\n      <h1>Lista zadaÅ„</h1>\r\n   </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n   <main className=\"container\">\r\n      {children}\r\n   </main>\r\n);\r\n\r\nexport default Container;","import { useEffect, useState } from \"react\";\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport TextButtons from \"./TextButtons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n\tconst storedTasks = localStorage.getItem(\"tasks\");\n\n\tconst [tasks, setTasks] = useState(\n\t\tstoredTasks !== null ? JSON.parse(storedTasks) : []\n\t);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\t}, [tasks]);\n\n\tconst [hideDone, setHideDone] = useState(false);\n\n\tconst toggleHideDone = () => {\n\t\tsetHideDone(hideDone => !hideDone);\n\t};\n\n\tconst removeTask = (id) => {\n\t\tsetTasks(tasks => tasks.filter(task => task.id !== id));\n\t};\n\n\tconst toggleTaskDone = (id) => {\n\t\tsetTasks(tasks => tasks.map(task => {\n\t\t\tif (task.id === id) {\n\t\t\t\treturn { ...task, done: !task.done };\n\t\t\t}\n\t\t\treturn task;\n\t\t}))\n\t};\n\n\tconst setAllDone = () => {\n\t\tsetTasks(tasks => tasks.map(task => ({\n\t\t\t...task,\n\t\t\tdone: true,\n\t\t})));\n\t};\n\n\tconst addNewTask = (newTaskContent) => {\n\t\tsetTasks(tasks => [\n\t\t\t...tasks,\n\t\t\t{\n\t\t\t\tid: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n\t\t\t\tcontent: newTaskContent,\n\t\t\t\tdone: false,\n\t\t\t}\n\t\t])\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Header />\n\t\t\t<Section\n\t\t\t\ttitle=\"Dodaj nowe zadanie\"\n\t\t\t\tbody={<Form addNewTask={addNewTask} />}\n\t\t\t/>\n\t\t\t<Section\n\t\t\t\ttitle=\"Lista zadaÅ„\"\n\t\t\t\textraHeaderContent={\n\t\t\t\t\t<TextButtons\n\t\t\t\t\t\ttasks={tasks}\n\t\t\t\t\t\thideDone={hideDone}\n\t\t\t\t\t\ttoggleHideDone={toggleHideDone}\n\t\t\t\t\t\tsetAllDone={setAllDone}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\tbody={\n\t\t\t\t\t<TasksList\n\t\t\t\t\t\ttasks={tasks}\n\t\t\t\t\t\thideDone={hideDone}\n\t\t\t\t\t\tremoveTask={removeTask}\n\t\t\t\t\t\ttoggleTaskDone={toggleTaskDone}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t/>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}