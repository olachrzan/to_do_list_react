{"version":3,"sources":["features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/TextButtons/styled.js","features/tasks/TextButtons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage.js","App.js","reportWebVitals.js","GlobalStyle.js","store.js","index.js","theme.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","newTaskObject","payload","push","removeTask","taskId","index","findIndex","id","splice","toggleTaskDone","done","toggleHideDone","state","setAllDone","actions","selectTasksSlice","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","NewTaskForm","styled","form","theme","breakpoints","mobile","Input","input","Button","colors","teal","white","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","value","onChange","target","placeholder","ref","autoFocus","type","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","button","green","remove","crimson","TasksList","useSelector","map","task","Container","div","TextButtons","areTasksEmpty","isEveryTaskDone","disabled","Wrapper","section","Header","header","Title","h2","Section","title","extraHeaderContent","body","main","children","TasksPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","gallery","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"oOAEMA,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZC,MAAO,GACPC,UAAU,GAEZC,SAAU,CACRC,QAAS,cAA4C,IAAzCH,EAAwC,EAAxCA,MAAoBI,EAAoB,EAA7BC,QACrBL,EAAMM,KAAKF,IAEbG,WAAY,cAAqC,IAAlCP,EAAiC,EAAjCA,MAAoBQ,EAAa,EAAtBH,QAClBI,EAAQT,EAAMU,WAAU,qBAAGC,KAAgBH,KACjDR,EAAMY,OAAOH,EAAO,IAEtBI,eAAgB,cAAqC,IAAlCb,EAAiC,EAAjCA,MAAoBQ,EAAa,EAAtBH,QACtBI,EAAQT,EAAMU,WAAU,qBAAGC,KAAgBH,KACjDR,EAAMS,GAAOK,MAAQd,EAAMS,GAAOK,MAEpCC,eAAgB,SAAAC,GACdA,EAAMf,UAAYe,EAAMf,UAE1BgB,WAAY,YAAgB,IAAD,EAAZjB,EAAY,EAAZA,MAAY,cACNA,GADM,IACzB,2BAA0B,SACnBc,MAAO,GAFW,mCAQxB,EAA4ElB,EAAWsB,QAA/Ef,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,WAAYM,EAA7B,EAA6BA,eAAgBE,EAA7C,EAA6CA,eAAgBE,EAA7D,EAA6DA,WAE9DE,EAAmB,SAAAH,GAAK,OAAIA,EAAMhB,OAC3BoB,EAAc,SAAAJ,GAAK,OAAIG,EAAiBH,GAAOhB,OAC/CqB,EAAiB,SAAAL,GAAK,OAAIG,EAAiBH,GAAOf,UAClDqB,EAAsB,SAAAN,GAAK,OAAkC,IAA9BI,EAAYJ,GAAOO,QAClDC,EAAwB,SAAAR,GAAK,OAAII,EAAYJ,GAAOS,OAAM,qBAAGX,SAE3DlB,IAAf,Q,cCrCM8B,EAAcC,IAAOC,KAAV,uKAMM,qBAAGC,MAAkBC,YAAYC,UAKlDC,EAAQL,IAAOM,MAAV,6KAMY,qBAAGJ,MAAkBC,YAAYC,UAKlDG,EAASP,IAAOM,MAAV,oWAEU,qBAAGJ,MAAkBM,OAAOC,QACvC,qBAAGP,MAAkBM,OAAOE,SAchB,qBAAGR,MAAkBC,YAAYC,U,OCKzCO,EAxCF,WACZ,IAAMC,EAAWC,iBAAO,MACxB,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAWC,cAkBjB,OACC,eAACnB,EAAD,CAAaoB,SAjBO,SAACC,GACrBA,EAAMC,iBACN,IAAMC,EAAwBP,EAAeQ,OACf,KAA1BD,IAIJL,EAASzC,EAAQ,CAChBgD,QAASF,EACTnC,MAAM,EACNH,GAAIyC,iBAGLT,EAAkB,MAIlB,UACC,cAACX,EAAD,CACCqB,MAAOX,EACPY,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAAkBY,EAAOF,QACnDG,YAAY,wBACZC,IAAKlB,EACLmB,WAAS,IAEV,cAACxB,EAAD,CACCyB,KAAK,SACLN,MAAM,gBACNO,QAAS,kBAAMrB,EAASsB,QAAQC,eCtC9BC,EAAOpC,IAAOqC,GAAV,iFAMJC,EAAOtC,IAAOuC,GAAV,mIAMN,qBAAGC,QAAuBC,YAAJ,qDAKpBC,EAAU1C,IAAO2C,KAAV,yEAIT,qBAAGxD,MAAmBsD,YAAJ,qEAKhBlC,EAASP,IAAO4C,OAAV,gUAGU,qBAAG1C,MAAkBM,OAAOqC,SACvC,qBAAG3C,MAAkBM,OAAOE,SAenC,qBAAGoC,QAAuBL,YAAJ,0DACF,qBAAGvC,MAAkBM,OAAOuC,cCbrCC,EA/BG,WACjB,IAAM3E,EAAQ4E,YAAYxD,GACpBnB,EAAW2E,YAAYvD,GAEvBuB,EAAWC,cAEjB,OACC,cAACkB,EAAD,UACE/D,EAAM6E,KAAI,SAAAC,GAAI,OACd,eAACb,EAAD,CAECE,OAAQW,EAAKhE,MAAQb,EAFtB,UAIC,cAAC,EAAD,CAAQ2D,QAAS,kBAAMhB,EAAS/B,EAAeiE,EAAKnE,MAApD,SACEmE,EAAKhE,KAAO,SAAM,KAEpB,cAACuD,EAAD,CAASvD,KAAMgE,EAAKhE,KAApB,SACEgE,EAAK3B,UAEP,cAAC,EAAD,CACCsB,QAAM,EACNb,QAAS,kBAAMhB,EAASrC,EAAWuE,EAAKnE,MAFzC,4BATKmE,EAAKnE,UCZToE,EAAYpD,IAAOqD,IAAV,+GAGQ,qBAAGnD,MAAkBC,YAAYC,UAKlDG,GAASP,IAAO4C,OAAV,wZAKD,qBAAG1C,MAAkBM,OAAOC,QAiBhB,qBAAGP,MAAkBC,YAAYC,UCHzCkD,GAzBK,WACnB,IAAMhF,EAAW2E,YAAYvD,GACvB6D,EAAgBN,YAAYtD,GAC5B6D,EAAkBP,YAAYpD,GAE9BoB,EAAWC,cAEjB,OAAIqC,EACI,KAGP,eAAC,EAAD,WACC,eAAC,GAAD,CAAQtB,QAAS,kBAAMhB,EAAS7B,MAAhC,UACEd,EAAW,aAAU,QADvB,qBAGA,cAAC,GAAD,CACC2D,QAAS,kBAAMhB,EAAS3B,MACxBmE,SAAUD,EAFX,uCCjBGE,GAAU1D,IAAO2D,QAAV,0HACS,qBAAGzD,MAAkBM,OAAOE,SAM5CkD,GAAS5D,IAAO6D,OAAV,kPAQW,qBAAG3D,MAAkBC,YAAYC,UAKlD0D,GAAQ9D,IAAO+D,GAAV,+HAIY,qBAAG7D,MAAkBC,YAAYC,UCdzC4D,GAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,mBAAoBC,EAA9B,EAA8BA,KAA9B,OACf,eAACT,GAAD,WACC,eAACE,GAAD,WACC,cAACE,GAAD,UAAQG,IACPC,KAEF,8BAAMC,QCNKT,GAAU1D,IAAOoE,KAAV,uECMLhB,GANG,SAAC,GAAD,IAAGiB,EAAH,EAAGA,SAAH,OACjB,cAAC,GAAD,UACEA,KCoBYC,GAlBG,WAEjB,OACC,eAAC,GAAD,WACC,kDACA,cAAC,GAAD,CACCL,MAAM,qBACNE,KAAM,cAAC,EAAD,MAEP,cAAC,GAAD,CACCF,MAAM,mBACNC,mBAAoB,cAAC,GAAD,IACpBC,KAAM,cAAC,EAAD,UChBGI,GAAM,kBAAM,cAAC,GAAD,KCUVC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLDQ,GAAcC,YAAH,8QAWA,qBAAGhF,MAAkBM,OAAO2E,WCVrCC,eAAe,CAC5BC,QAAS,CACPhH,MAAOiH,KCKXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,eAAC,IAAD,CAAexF,MCbA,CACpBM,OAAQ,CACPC,KAAM,UACN0E,QAAS,UACTzE,MAAO,UACPmC,MAAO,UACPE,QAAS,WAEV5C,YAAa,CACZC,OAAQ,UDIJ,UACE,cAAC6E,GAAD,IACA,cAAC,GAAD,WAINU,SAASC,eAAe,SAM1BpB,O","file":"static/js/main.d2eb345f.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: newTaskObject }) => {\r\n      tasks.push(newTaskObject);\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1)\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { addTask, removeTask, toggleTaskDone, toggleHideDone, setAllDone } = tasksSlice.actions;\r\n\r\nconst selectTasksSlice = state => state.tasks;\r\nexport const selectTasks = state => selectTasksSlice(state).tasks;\r\nexport const selectHideDone = state => selectTasksSlice(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nconst NewTaskForm = styled.form`\r\n  padding: 20px;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  flex-grow: 1;\r\n  margin-right: 10px;\r\n  padding: 8px;\r\n  border: 2px solid #ddd;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    margin: 0 0 10px 0;\r\n  }\r\n`;\r\n\r\nconst Button = styled.input`\r\n  padding: 9px;\r\n  background-color: ${({ theme }) => theme.colors.teal};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border: none;\r\n  transition: filter 0.4s, transform 0.4s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    transform: scale(1.04);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-grow: 1;\r\n  }\r\n`;\r\n\r\nexport { NewTaskForm, Input, Button };","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { NewTaskForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n\tconst inputRef = useRef(null);\r\n\tconst [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst onFormSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst trimmedNewTaskContent = newTaskContent.trim();\r\n\t\tif (trimmedNewTaskContent === \"\") {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tdispatch(addTask({\r\n\t\t\tcontent: trimmedNewTaskContent,\r\n\t\t\tdone: false,\r\n\t\t\tid: nanoid()\r\n\t\t}));\r\n\r\n\t\tsetNewTaskContent(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<NewTaskForm onSubmit={onFormSubmit}>\r\n\t\t\t<Input\r\n\t\t\t\tvalue={newTaskContent}\r\n\t\t\t\tonChange={({ target }) => setNewTaskContent(target.value)}\r\n\t\t\t\tplaceholder=\"Co jest do zrobienia?\"\r\n\t\t\t\tref={inputRef}\r\n\t\t\t\tautoFocus\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\ttype=\"submit\"\r\n\t\t\t\tvalue=\"Dodaj zadanie\"\r\n\t\t\t\tonClick={() => inputRef.current.focus()}\r\n\t\t\t/>\r\n\t\t</NewTaskForm>\r\n\t)\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nconst List = styled.ul`\r\n  padding: 20px;\r\n  margin: 0;\r\n  list-style: none;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  padding: 10px;\r\n  border-bottom: 2px solid #eee;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nconst Content = styled.span`\r\n  margin: 0 15px;\r\n  flex-grow: 1;\r\n\r\n  ${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n  `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 25px;\r\n  width: 25px;\r\n  background-color: ${({ theme }) => theme.colors.green};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border: none;\r\n  font-size: 14px;\r\n  flex-shrink: 0;\r\n  transition: filter 0.4s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: ${({ theme }) => theme.colors.crimson};\r\n  `}\r\n`;\r\n\r\nexport { List, Item, Content, Button };","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, selectHideDone, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n\tconst tasks = useSelector(selectTasks);\r\n\tconst hideDone = useSelector(selectHideDone);\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<List>\r\n\t\t\t{tasks.map(task => (\r\n\t\t\t\t<Item\r\n\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\thidden={task.done && hideDone}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Button onClick={() => dispatch(toggleTaskDone(task.id))} >\r\n\t\t\t\t\t\t{task.done ? \"✔\" : \"\"}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Content done={task.done} >\r\n\t\t\t\t\t\t{task.content}\r\n\t\t\t\t\t</Content>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tremove\r\n\t\t\t\t\t\tonClick={() => dispatch(removeTask(task.id))}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t🗑\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Item>\r\n\t\t\t))}\r\n\t\t</List >\r\n\t)\r\n};\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 30px;\r\n  padding: 0;\r\n  border: none;\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.colors.teal};\r\n  transition: filter 0.4s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: #aaa;\r\n    cursor: default;\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    margin: 20px 0 0 0;\r\n  }\r\n`;\r\n\r\nexport { Container, Button };","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectHideDone, selectAreTasksEmpty, selectIsEveryTaskDone, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Container, Button } from \"./styled\";\r\n\r\nconst TextButtons = () => {\r\n\tconst hideDone = useSelector(selectHideDone);\r\n\tconst areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n\tconst isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tif (areTasksEmpty)\r\n\t\treturn null;\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Button onClick={() => dispatch(toggleHideDone())} >\r\n\t\t\t\t{hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\tonClick={() => dispatch(setAllDone())}\r\n\t\t\t\tdisabled={isEveryTaskDone}\r\n\t\t\t>\r\n\t\t\t\tUkończ wszystkie\r\n\t\t\t</Button>\r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nexport default TextButtons;","import styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.section`\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n  padding: 0;\r\n  margin-bottom: 10px;\r\n  box-shadow: 0 0 7px #ddd;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  border-bottom: 2px solid #eee;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    align-self: flex-start;\r\n  }\r\n`;\r\n\r\nexport { Wrapper, Header, Title };","import { Wrapper, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n\t<Wrapper>\r\n\t\t<Header>\r\n\t\t\t<Title>{title}</Title>\r\n\t\t\t{extraHeaderContent}\r\n\t\t</Header>\r\n\t\t<div>{body}</div>\r\n\t</Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n  max-width: 900px;\r\n  margin: 50px auto;\r\n`;","import { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n\t<Wrapper>\r\n\t\t{children}\r\n\t</Wrapper>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport TextButtons from \"./TextButtons\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst TasksPage = () => {\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<h1>Lista zadań</h1>\r\n\t\t\t<Section\r\n\t\t\t\ttitle=\"Dodaj nowe zadanie\"\r\n\t\t\t\tbody={<Form />}\r\n\t\t\t/>\r\n\t\t\t<Section\r\n\t\t\t\ttitle=\"Lista zadań\"\r\n\t\t\t\textraHeaderContent={<TextButtons />}\r\n\t\t\t\tbody={<TasksList />}\r\n\t\t\t/>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default TasksPage;\r\n","import TasksPage from \"./features/tasks/TasksPage\"\r\n\r\nexport const App = () => <TasksPage/>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    word-break: break-word;\r\n    background-color: ${({ theme }) => theme.colors.gallery};\r\n    font-family: 'Open Sans', sans-serif;\r\n    padding: 0 20px;\r\n  }\r\n`;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from './theme'\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n\tcolors: {\r\n\t\tteal: \"#008080\",\r\n\t\tgallery: \"#EFEFEF\",\r\n\t\twhite: \"#FFFFFF\",\r\n\t\tgreen: \"#008000\",\r\n\t\tcrimson: \"#DB143C\",\r\n\t},\r\n\tbreakpoints: {\r\n\t\tmobile: \"768px\",\r\n\t},\r\n}"],"sourceRoot":""}