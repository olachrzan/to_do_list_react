{"version":3,"sources":["features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/TextButtons/styled.js","features/tasks/TextButtons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage.js","App.js","reportWebVitals.js","GlobalStyle.js","store.js","index.js","theme.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","removeTask","index","findIndex","id","splice","toggleTaskDone","done","toggleHideDone","state","setAllDone","actions","selectTasks","NewTaskForm","styled","form","theme","breakpoints","mobile","Input","input","Button","colors","teal","white","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","value","onChange","target","placeholder","ref","autoFocus","type","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","button","green","remove","crimson","TasksList","useSelector","map","task","Container","div","TextButtons","length","disabled","every","Wrapper","section","Header","header","Title","h2","Section","title","extraHeaderContent","body","main","children","TasksPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","gallery","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.65f5ea6d.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    removeTask: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex(({ id }) => id === payload);\r\n      tasks.splice(index, 1)\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex(({ id }) => id === payload);\r\n      tasks[index].done = !tasks[index].done\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { addTask, removeTask, toggleTaskDone, toggleHideDone, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nconst NewTaskForm = styled.form`\r\n  padding: 20px;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  flex-grow: 1;\r\n  margin-right: 10px;\r\n  padding: 8px;\r\n  border: 2px solid #ddd;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    margin: 0 0 10px 0;\r\n  }\r\n`;\r\n\r\nconst Button = styled.input`\r\n  padding: 9px;\r\n  background-color: ${({ theme }) => theme.colors.teal};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border: none;\r\n  transition: filter 0.4s, transform 0.4s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    transform: scale(1.04);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-grow: 1;\r\n  }\r\n`;\r\n\r\nexport { NewTaskForm, Input, Button };","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { NewTaskForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n   const inputRef = useRef(null);\r\n   const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      const trimmedNewTaskContent = newTaskContent.trim();\r\n      if (trimmedNewTaskContent === \"\") {\r\n         return\r\n      }\r\n\r\n      dispatch(addTask({\r\n         content: trimmedNewTaskContent,\r\n         done: false,\r\n         id: nanoid()\r\n      }));\r\n\r\n      setNewTaskContent(\"\");\r\n   };\r\n\r\n   return (\r\n      <NewTaskForm onSubmit={onFormSubmit}>\r\n         <Input\r\n            value={newTaskContent}\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            ref={inputRef}\r\n            autoFocus\r\n         />\r\n         <Button\r\n            type=\"submit\"\r\n            value=\"Dodaj zadanie\"\r\n            onClick={() => inputRef.current.focus()}\r\n         />\r\n      </NewTaskForm>\r\n   )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nconst List = styled.ul`\r\n  padding: 20px;\r\n  margin: 0;\r\n  list-style: none;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  padding: 10px;\r\n  border-bottom: 2px solid #eee;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nconst Content = styled.span`\r\n  margin: 0 15px;\r\n  flex-grow: 1;\r\n\r\n  ${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n  `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 25px;\r\n  width: 25px;\r\n  background-color: ${({ theme }) => theme.colors.green};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border: none;\r\n  font-size: 14px;\r\n  flex-shrink: 0;\r\n  transition: filter 0.4s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: ${({ theme }) => theme.colors.crimson};\r\n  `}\r\n`;\r\n\r\nexport { List, Item, Content, Button };","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n\tconst { tasks, hideDone } = useSelector(selectTasks);\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<List>\r\n\t\t\t{tasks.map(task => (\r\n\t\t\t\t<Item\r\n\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\thidden={task.done && hideDone}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Button onClick={() => dispatch(toggleTaskDone(task.id))} >\r\n\t\t\t\t\t\t{task.done ? \"✔\" : \"\"}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Content done={task.done} >\r\n\t\t\t\t\t\t{task.content}\r\n\t\t\t\t\t</Content>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tremove\r\n\t\t\t\t\t\tonClick={() => dispatch(removeTask(task.id))}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t🗑\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Item>\r\n\t\t\t))}\r\n\t\t</List >\r\n\t)\r\n};\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 30px;\r\n  padding: 0;\r\n  border: none;\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.colors.teal};\r\n  transition: filter 0.4s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: #aaa;\r\n    cursor: default;\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    margin: 20px 0 0 0;\r\n  }\r\n`;\r\n\r\nexport { Container, Button };","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Container, Button } from \"./styled\";\r\n\r\nconst TextButtons = () => {\r\n\tconst { tasks, hideDone } = useSelector(selectTasks);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tif (tasks.length === 0)\r\n\t\treturn null;\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Button onClick={() => dispatch(toggleHideDone())} >\r\n\t\t\t\t{hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\tonClick={() => dispatch(setAllDone())}\r\n\t\t\t\tdisabled={tasks.every(({ done }) => done)}\r\n\t\t\t>\r\n\t\t\t\tUkończ wszystkie\r\n\t\t\t</Button>\r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nexport default TextButtons;","import styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.section`\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n  padding: 0;\r\n  margin-bottom: 10px;\r\n  box-shadow: 0 0 7px #ddd;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  border-bottom: 2px solid #eee;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\r\n    align-self: flex-start;\r\n  }\r\n`;\r\n\r\nexport { Wrapper, Header, Title };","import { Wrapper, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n   <Wrapper>\r\n      <Header>\r\n         <Title>{title}</Title>\r\n         {extraHeaderContent}\r\n      </Header>\r\n      <div>{body}</div>\r\n   </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n  max-width: 900px;\r\n  margin: 50px auto;\r\n`;","import { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n   <Wrapper>\r\n      {children}\r\n   </Wrapper>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport TextButtons from \"./TextButtons\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst TasksPage = () => {\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<h1>Lista zadań</h1>\r\n\t\t\t<Section\r\n\t\t\t\ttitle=\"Dodaj nowe zadanie\"\r\n\t\t\t\tbody={<Form />}\r\n\t\t\t/>\r\n\t\t\t<Section\r\n\t\t\t\ttitle=\"Lista zadań\"\r\n\t\t\t\textraHeaderContent={<TextButtons />}\r\n\t\t\t\tbody={<TasksList />}\r\n\t\t\t/>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default TasksPage;\r\n","import TasksPage from \"./features/tasks/TasksPage\"\r\n\r\nexport const App = () => <TasksPage/>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    word-break: break-word;\r\n    background-color: ${({ theme }) => theme.colors.gallery};\r\n    font-family: 'Open Sans', sans-serif;\r\n    padding: 0 20px;\r\n  }\r\n`;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from './theme'\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n\tcolors: {\r\n\t\tteal: \"#008080\",\r\n\t\tgallery: \"#EFEFEF\",\r\n\t\twhite: \"#FFFFFF\",\r\n\t\tgreen: \"#008000\",\r\n\t\tcrimson: \"#DB143C\",\r\n\t},\r\n\tbreakpoints: {\r\n\t\tmobile: \"768px\",\r\n\t},\r\n}"],"sourceRoot":""}